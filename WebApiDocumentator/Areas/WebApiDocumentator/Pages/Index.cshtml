@page
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using WebApiDocumentator.Areas.WebApiDocumentator.Pages
@using WebApiDocumentator.Metadata
@using WebApiDocumentator.Models
@model WebApiDocumentator.Areas.WebApiDocumentator.Pages.IndexModel
@{
    var selected = Model.SelectedEndpoint;
    var method = selected?.HttpMethod ?? "GET";
    var route = selected?.Route ?? "/default/route";
    var version = Model.GetApiVersion();
    var summary = selected?.Summary;
    var parameters = string.IsNullOrWhiteSpace(selected?.Description) ? [] : selected?.Description?.Split("\n") ?? [];
    ViewData["SelectedEndpoint"] = selected;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@Model.Name (@Model.Version) | Documentation</title>
    @Html.Raw(Model.Style)
</head>
<body>
    <button class="sidebar-toggle" id="sidebarToggle">
        |||
    </button>

    <div id="sidebar">
        <div class="sidebar-header">
            <a href="/Docs">
                <h3>@Model.Name</h3>
            </a>
        </div>

        <div class="sidebar-search">
            <input type="text" id="searchEndpoints" placeholder="Search endpoints...">
        </div>

        <div class="sidebar-title">
            <span class="toggle-all" id="toggleAll">Expand All</span>
        </div>

        <partial name="EndpointNode" model="Model.Groups" view-data="ViewData" />
    </div>

    <div id="content">
        @if(selected == null)
        {
            <div class="card">
                <h1>@Model.Name</h1>
                <h2>@Model.Version</h2>
                @if(!string.IsNullOrWhiteSpace(version))
                {
                    <a class="btn" href="/openapi/@(version).json" target="_blank">
                        OpenAPI @version
                    </a>
                }
                <p>@Model.Description</p>
                @if(!string.IsNullOrWhiteSpace(Model.ExampleBodyJson))
                {
                    <pre class="json-viewer">@Model.ExampleBodyJson</pre>
                }
                else
                {
                    <p>No return schema available.</p>
                }
            </div>
        }
        else
        {
            <div class="endpoint-header">
                <span class="endpoint-method @selected.HttpMethod">@selected.HttpMethod</span>
                <h1 class="endpoint-title">@selected.Route</h1>
            </div>

            <p class="endpoint-description">@summary</p>

            @if(parameters.Any())
            {
                <div class="card">
                    <h3>Additional Parameters</h3>
                    <ul>
                        @foreach(var param in parameters)
                        {
                            <li>@param</li>
                        }
                    </ul>
                </div>
            }

            <div class="card">
                <h3>Parameters</h3>
                @if(selected.Parameters.Any())
                {
                    <div style="overflow-x: auto;">
                        <table class="schema-table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Type</th>
                                    <th>Required</th>
                                    <th>Source</th>
                                    <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var param in selected.Parameters)
                                {
                                    <tr>
                                        <td>@param.Name</td>
                                        <td>@param.Type</td>
                                        <td>@(param.IsRequired ? "Yes" : "No")</td>
                                        <td class="source-@param.Source.ToLower()">@param.Source</td>
                                        <td>@param.Description</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p>No parameters.</p>
                }
            </div>

            <div class="card">
                <h3>Response</h3>
                <p><strong>Type:</strong> @selected.ReturnType</p>
                @if(!string.IsNullOrWhiteSpace(selected.ExampleJson))
                {
                    <pre class="json-viewer">@selected.ExampleJson</pre>
                }
                else
                {
                    <p>No return schema available.</p>
                }
            </div>

            <div class="card test-form">
                <h3>Test this endpoint</h3>
                <form method="post" action="/Docs?id=@selected.Id" id="testForm">
                    <input type="hidden" name="TestInput.Id" value="@selected.Id" />
                    <input type="hidden" name="TestInput.Method" value="@method" />
                    <input type="hidden" name="TestInput.Route" value="@route" />
                    @Html.AntiForgeryToken()

                    <div class="auth-section">
                        <input type="hidden" id="authTypeValue" name="authTypeValue" value="@Model.TestInput.Authentication.Type" />
                        <input type="hidden" id="apiKeyLocationValue" name="apiKeyLocationValue" value="@Model.TestInput.Authentication.ApiKeyLocation" />
                        <label for="authType">Authentication Type</label>
                        <select id="authType" name="TestInput.Authentication.Type" class="form-control" onchange="toggleAuthFields()">
                            <option value="None">None</option>
                            <option value="Bearer">Bearer Token</option>
                            <option value="ApiKey">API Key</option>
                            <option value="Basic">Basic Auth</option>
                        </select>

                        <div id="bearerFields" class="auth-fields @(Model.TestInput.Authentication.Type == AuthenticationType.Bearer ? "active" : "")">
                            <label for="bearerToken">Bearer Token (Required)</label>
                            <input type="text" id="bearerToken" name="TestInput.Authentication.BearerToken" value="@Model.TestInput.Authentication.BearerToken" placeholder="Enter Bearer Token" />
                            @if(ModelState.ContainsKey("TestInput.Authentication.BearerToken"))
                            {
                                <div class="field-error">
                                    @ModelState["TestInput.Authentication.BearerToken"].Errors.FirstOrDefault()?.ErrorMessage
                                </div>
                            }
                        </div>

                        <div id="apiKeyFields" class="auth-fields @(Model.TestInput.Authentication.Type == AuthenticationType.ApiKey ? "active" : "")">
                            <label for="apiKeyValue">API Key (Required)</label>
                            <input type="text" id="apiKeyValue" name="TestInput.Authentication.ApiKeyValue" value="@Model.TestInput.Authentication.ApiKeyValue" placeholder="Enter API Key" />
                            @if(ModelState.ContainsKey("TestInput.Authentication.ApiKeyValue"))
                            {
                                <div class="field-error">
                                    @ModelState["TestInput.Authentication.ApiKeyValue"].Errors.FirstOrDefault()?.ErrorMessage
                                </div>
                            }

                            <label for="apiKeyName">Header/Parameter Name (Optional, defaults to 'X-Api-Key')</label>
                            <input type="text" id="apiKeyName" name="TestInput.Authentication.ApiKeyName" value="@Model.TestInput.Authentication.ApiKeyName" placeholder="e.g., X-Api-Key" />
                            @if(ModelState.ContainsKey("TestInput.Authentication.ApiKeyName"))
                            {
                                <div class="field-error">
                                    @ModelState["TestInput.Authentication.ApiKeyName"].Errors.FirstOrDefault()?.ErrorMessage
                                </div>
                            }

                            <label for="apiKeyLocation">Location</label>
                            <select id="apiKeyLocation" name="TestInput.Authentication.ApiKeyLocation" class="form-control">
                                <option value="Header">Header</option>
                                <option value="Query">Query</option>
                            </select>
                        </div>

                        <div id="basicFields" class="auth-fields @(Model.TestInput.Authentication.Type == AuthenticationType.Basic ? "active" : "")">
                            <label for="basicUsername">Username (Required)</label>
                            <input type="text" id="basicUsername" name="TestInput.Authentication.BasicUsername" value="@Model.TestInput.Authentication.BasicUsername" placeholder="Enter Username" />
                            <label for="basicPassword">Password (Required)</label>
                            <input type="password" id="basicPassword" name="TestInput.Authentication.BasicPassword" value="@Model.TestInput.Authentication.BasicPassword" placeholder="Enter Password" />
                        </div>
                        <button type="button" class="btn btn-secondary" onclick="clearAuth()">Clear Authentication</button>
                    </div>

                    @foreach(var param in selected.Parameters)
                    {
                        if(param.IsValueParameter)
                        {
                            string value = Model.TestInput.Parameters.ContainsKey(param.Name) ? Model.TestInput.Parameters[param.Name] : Model.GenerateFlatSchema(param.Schema) ?? "";
                            <div class="form-group">
                                <label>@param.Name (@param.Type): @(param.IsRequired ? "Required" : "Optional")</label>
                                @if(param.IsFromBody)
                                {
                                    <textarea name="TestInput.Parameters[@param.Name]"
                                              placeholder="@(Model.GenerateFlatSchema(param.Schema) ?? "Enter JSON here")">@value</textarea>
                                }
                                else
                                {
                                    <input type="text"
                                           name="TestInput.Parameters[@param.Name]"
                                           value="@value"
                                           placeholder="@(param.IsRequired ? "Required" : "Optional")" />
                                }
                                @if(ModelState.ContainsKey($"TestInput.Parameters[{param.Name}]"))
                                {
                                    <div class="field-error">
                                        @ModelState[$"TestInput.Parameters[{param.Name}]"].Errors.FirstOrDefault()?.ErrorMessage
                                    </div>
                                }
                            </div>
                        }
                    }
                    @if(!ModelState.IsValid && ModelState.Any(e => e.Value?.Errors?.Any(e => !string.IsNullOrWhiteSpace(e.ErrorMessage)) ?? false))
                    {
                        <div class="error-message">
                            <ul>
                                @foreach(var error in ModelState.Where(kvp => !kvp.Key.StartsWith("TestInput.Parameters[")))
                                {
                                    foreach(var err in error.Value.Errors)
                                    {
                                        if(!string.IsNullOrWhiteSpace(err.ErrorMessage))
                                        {
                                            <li>
                                                @err.ErrorMessage
                                            </li>
                                        }
                                    }
                                }
                            </ul>
                        </div>
                    }

                    <button type="submit" class="btn" id="submitBtn">Test Endpoint</button>
                    <div class="loading" id="loadingIndicator">
                        <div class="loading-spinner"></div>
                        <p>Sending request...</p>
                    </div>
                </form>
            </div>

            @if(Model.TestResponse != null)
            {
                <div class="card">
                    <h4>Test Response</h4>
                    <pre class="json-viewer">@Model.TestResponse</pre>
                </div>
            }
        }
    </div>

    @if(selected != null)
    {
        <div id="examples">
            <h3>Examples</h3>

            <div class="example-tabs">
                <div class="example-tab active" data-tab="curl">cURL</div>
                <div class="example-tab" data-tab="csharp">C#</div>
                <div class="example-tab" data-tab="javascript">JavaScript</div>
            </div>

            <div class="example-tab-content active" id="curl-tab">
                <pre>curl -X @selected.HttpMethod https://api.yourwebsite.com@($"{Model.ExampleRequestUrl}")
                    @if(!string.IsNullOrWhiteSpace(Model.RequestBodyJson))
                    {
                        <text>    -H "Content-Type: application/json"
                                                    -d '@Html.Raw(Model.RequestBodyJson)'</text>
                    }</pre>
            </div>

            <div class="example-tab-content" id="csharp-tab">
                <pre>using var client = new HttpClient();
                        client.BaseAddress = new Uri("https://api.yourwebsite.com");
                    @if(!string.IsNullOrWhiteSpace(Model.RequestBodyJson))
                    {
                        <text>using var content = new StringContent(@Html.Raw(Model.RequestBodyJson), System.Text.Encoding.UTF8, "application/json");
                                                using var response = await client.@(Model.HttpMethodFormatted)Async("@Model.ExampleRequestUrl", content);</text>
                    }
                    else
                    {
                        <text>using var response = await client.@(Model.HttpMethodFormatted)Async("@Model.ExampleRequestUrl");</text>
                    }
                        response.EnsureSuccessStatusCode();
                        var content = await response.Content.ReadAsStringAsync();</pre>
            </div>

            <div class="example-tab-content" id="javascript-tab">
                <pre>fetch("https://api.yourwebsite.com@($"{Model.ExampleRequestUrl}")", {
                            method: "@selected.HttpMethod",
                    @if(!string.IsNullOrWhiteSpace(Model.RequestBodyJson))
                    {
                        <text>    headers: { "Content-Type": "application/json" },
                                                    body: @Html.Raw(Model.RequestBodyJson)</text>
                    }
                        })
                        .then(res => res.json())
                        .then(data => console.log(data));</pre>
            </div>
        </div>
    }

    <script>
        // Auth related functions
        function initAuthFields() {
            // Initialize auth type and api key location from hidden fields
            var authTypeItem = document.getElementById("authTypeValue");
            if (authTypeItem) {
                document.getElementById("authType").value = authTypeItem.value;
            }

            var apiKeyLocationItem = document.getElementById("apiKeyLocationValue");
            if (apiKeyLocationItem) {
                document.getElementById("apiKeyLocation").value = apiKeyLocationItem.value;
            }

            toggleAuthFields();
        }

        function toggleAuthFields() {
            var authType = document.getElementById("authType");

            if (authType) {
                var bearerFields = document.getElementById("bearerFields");
                var apiKeyFields = document.getElementById("apiKeyFields");
                var basicFields = document.getElementById("basicFields");

                bearerFields.classList.remove("active");
                apiKeyFields.classList.remove("active");
                basicFields.classList.remove("active");

                if (authType.value === "Bearer") {
                    bearerFields.classList.add("active");
                } else if (authType.value === "ApiKey") {
                    apiKeyFields.classList.add("active");
                } else if (authType.value === "Basic") {
                    basicFields.classList.add("active");
                }
            }
        }

        function clearAuth() {
            // Reset authentication form
            document.getElementById("authType").value = "None";
            document.getElementById("bearerToken").value = "";
            document.getElementById("apiKeyValue").value = "";
            document.getElementById("apiKeyName").value = "";
            document.getElementById("apiKeyLocation").value = "Header";
            document.getElementById("basicUsername").value = "";
            document.getElementById("basicPassword").value = "";
            toggleAuthFields();

            // Send request to clear session
            fetch('/Docs?handler=ClearAuth', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            }).then(response => {
                if (response.ok) {
                    console.log("Authentication cleared");
                }
            });
        }

        // UI Setup functions
        function setupExampleTabs() {
            const tabs = document.querySelectorAll('.example-tab');
            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    // Remove active class from all tabs and contents
                    document.querySelectorAll('.example-tab').forEach(t => t.classList.remove('active'));
                    document.querySelectorAll('.example-tab-content').forEach(c => c.classList.remove('active'));

                    // Add active class to clicked tab and corresponding content
                    tab.classList.add('active');
                    const tabId = tab.getAttribute('data-tab');
                    document.getElementById(`${tabId}-tab`).classList.add('active');
                });
            });
        }

        function setupMobileSidebar() {
            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebar = document.getElementById('sidebar');

            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', () => {
                    sidebar.classList.toggle('active');
                });
            }

            // Close sidebar when clicking outside on mobile
            document.addEventListener('click', (e) => {
                if (window.innerWidth <= 768 &&
                    !sidebar.contains(e.target) &&
                    e.target !== sidebarToggle) {
                    sidebar.classList.remove('active');
                }
            });
        }

        // Collapsible groups functions
        function setupCollapsibleGroups() {
            const groupHeaders = document.querySelectorAll('.group-header');
            const toggleAllBtn = document.getElementById('toggleAll');
            let allCollapsed = true;

            // Primero calculamos todas las alturas correctamente
            calculateAllGroupHeights();

            // Configurar evento click para los headers
            groupHeaders.forEach(header => {
                header.addEventListener('click', (e) => {
                    if (e.target === toggleAllBtn) return;

                    const groupItems = header.nextElementSibling;
                    const toggle = header.querySelector('.group-toggle');

                    toggleGroup(groupItems, toggle);
                });
            });

            // Configurar el bot?n "Expand All/Collapse All"
            if (toggleAllBtn) {
                toggleAllBtn.addEventListener('click', () => {
                    allCollapsed = !allCollapsed;
                    toggleAllBtn.textContent = allCollapsed ? 'Expand All' : 'Collapse All';

                    groupHeaders.forEach(header => {
                        const groupItems = header.nextElementSibling;
                        const toggle = header.querySelector('.group-toggle');

                        if (allCollapsed) {
                            collapseGroup(groupItems, toggle);
                        } else {
                            expandGroup(groupItems, toggle);
                        }
                    });
                });
            }
        }

        function calculateAllGroupHeights() {
            // Obtenemos todos los grupos desde los m?s profundos hasta los m?s superficiales
            const allGroups = Array.from(document.querySelectorAll('.group-items'));

            // Ordenamos los grupos por profundidad (los m?s profundos primero)
            allGroups.sort((a, b) => {
                const depthA = getDepth(a);
                const depthB = getDepth(b);
                return depthB - depthA;
            });

            // Calculamos la altura para cada grupo
            allGroups.forEach(group => {
                const height = calculateGroupHeightRecursive(group);
                group.dataset.calculatedHeight = height;
            });
        }

        function getDepth(element) {
            let depth = 0;
            let current = element;

            while (current) {
                depth++;
                current = current.parentElement.closest('.group-items');
            }

            return depth;
        }

        function calculateGroupHeightRecursive(groupElement) {
            let height = 0;

            // Sumamos la altura de los elementos directos
            Array.from(groupElement.children).forEach(child => {
                if (child.style.display === 'none') return;

                // Sumamos la altura del elemento m?s sus m?rgenes
                const style = window.getComputedStyle(child);
                const margin = parseInt(style.marginTop) + parseInt(style.marginBottom);
                height += child.offsetHeight + margin;

                // Si es un grupo anidado
                if (child.classList.contains('group-items')) {
                    // Solo sumamos su altura si est? expandido
                    if (child.style.maxHeight && child.style.maxHeight !== '0px') {
                        height += parseInt(child.dataset.calculatedHeight || calculateGroupHeightRecursive(child));
                    }
                }
                // Si es una lista de endpoints (grupo padre)
                else if (child.classList.contains('endpoint-list')) {
                    Array.from(child.children).forEach(grandChild => {
                        if (grandChild.classList.contains('endpoint-group')) {
                            const items = grandChild.querySelector('.group-items');
                            if (items) {
                                // Solo sumamos la altura si est? expandido
                                if (items.style.maxHeight && items.style.maxHeight !== '0px') {
                                    height += parseInt(items.dataset.calculatedHeight || calculateGroupHeightRecursive(items));
                                }
                            }
                        }
                    });
                }
            });

            return height;
        }

        function expandGroup(groupItems, toggle) {
            // Forzar rec?lculo de la altura
            const height = calculateGroupHeightRecursive(groupItems);
            groupItems.dataset.calculatedHeight = height;
            groupItems.style.maxHeight = height + 'px';

            if (toggle) toggle.classList.remove('collapsed');

            // Tambi?n expandimos los grupos padres
            let parentGroup = groupItems.parentElement.closest('.group-items');
            while (parentGroup) {
                const parentHeight = calculateGroupHeightRecursive(parentGroup);
                parentGroup.dataset.calculatedHeight = parentHeight;
                parentGroup.style.maxHeight = parentHeight + 'px';

                const parentHeader = parentGroup.previousElementSibling;
                if (parentHeader && parentHeader.classList.contains('group-header')) {
                    const parentToggle = parentHeader.querySelector('.group-toggle');
                    if (parentToggle) parentToggle.classList.remove('collapsed');
                }

                parentGroup = parentGroup.parentElement.closest('.group-items');
            }
        }

        function collapseGroup(groupItems, toggle) {
            groupItems.style.maxHeight = '0';
            if (toggle) toggle.classList.add('collapsed');
        }

        function toggleGroup(groupItems, toggle) {
            if (groupItems.style.maxHeight !== '0px') {
                collapseGroup(groupItems, toggle);
            } else {
                expandGroup(groupItems, toggle);
            }
        }

        // Llamar a esta funci?n al cargar la p?gina
        function initMenu() {
            // Primero colapsar todo
            document.querySelectorAll('.group-items').forEach(group => {
                group.style.maxHeight = '0';
            });

            // Calcular alturas despu?s de colapsar
            setTimeout(() => {
                calculateAllGroupHeights();

                // Expandir solo la ruta seleccionada
                const selectedLink = document.querySelector('.endpoint-link.selected');
                if (selectedLink) {
                    let currentGroup = selectedLink.closest('.group-items');
                    while (currentGroup) {
                        const toggle = currentGroup.previousElementSibling?.querySelector('.group-toggle');
                        expandGroup(currentGroup, toggle);
                        currentGroup = currentGroup.parentElement.closest('.group-items');
                    }
                }
            }, 100);
        }

        // Search functionality
        function setupEndpointSearch() {
            const searchInput = document.getElementById('searchEndpoints');
            if (searchInput) {
                searchInput.addEventListener('input', () => {
                    const searchTerm = searchInput.value.toLowerCase();
                    const endpointLinks = document.querySelectorAll('.endpoint-link');
                    let anyVisible = false;

                    // First hide all elements
                    endpointLinks.forEach(link => {
                        link.style.display = 'none';
                    });

                    // Show only matching elements
                    endpointLinks.forEach(link => {
                        const text = link.textContent.toLowerCase();
                        if (text.includes(searchTerm)) {
                            link.style.display = 'flex';
                            anyVisible = true;

                            // Expand parent hierarchy
                            let parentGroup = link.closest('.group-items');
                            while (parentGroup) {
                                parentGroup.style.display = 'block';
                                expandGroup(parentGroup);

                                const header = parentGroup.previousElementSibling;
                                if (header && header.classList.contains('group-header')) {
                                    header.style.display = 'flex';
                                }

                                parentGroup = parentGroup.parentElement.closest('.group-items');
                            }
                        }
                    });

                    // Hide empty groups
                    document.querySelectorAll('.group-items').forEach(group => {
                        const visibleItems = group.querySelectorAll('.endpoint-link[style="display: flex;"]').length;
                        const childGroups = group.querySelectorAll('.group-items');
                        let childVisible = false;

                        childGroups.forEach(child => {
                            if (child.style.display !== 'none') {
                                childVisible = true;
                            }
                        });

                        if (visibleItems === 0 && !childVisible) {
                            group.style.display = 'none';
                            const header = group.previousElementSibling;
                            if (header && header.classList.contains('group-header')) {
                                header.style.display = 'none';
                            }
                        } else {
                            group.style.display = 'block';
                            const header = group.previousElementSibling;
                            if (header && header.classList.contains('group-header')) {
                                header.style.display = 'flex';
                            }
                        }
                    });
                });
            }
        }

        // Selected endpoint functions
        function collapseAllExceptSelected() {
            const selectedLink = document.querySelector('.endpoint-link.selected');

            // Collapse all groups first
            document.querySelectorAll('.group-items').forEach(group => {
                collapseGroup(group);
            });

            // If there's a selected element, expand its path
            if (selectedLink) {
                let currentGroup = selectedLink.closest('.group-items');
                while (currentGroup) {
                    expandGroup(currentGroup);
                    currentGroup = currentGroup.parentElement.closest('.group-items');
                }
            }
        }

        function scrollToSelectedEndpoint() {
            const selectedLink = document.querySelector('.endpoint-link.selected');
            if (selectedLink) {
                // Expand only the selected element's path
                collapseAllExceptSelected();

                // Scroll to selected element
                setTimeout(() => {
                    selectedLink.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }, 300);
            }
        }

        // Form submission
        function setupFormLoadingIndicator() {
            const form = document.getElementById('testForm');
            if (form) {
                form.addEventListener('submit', () => {
                    const submitBtn = document.getElementById('submitBtn');
                    const loadingIndicator = document.getElementById('loadingIndicator');

                    submitBtn.style.display = 'none';
                    loadingIndicator.style.display = 'block';
                });
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            // Initialize UI components
            initAuthFields();
            setupExampleTabs();
            setupMobileSidebar();
            setupEndpointSearch();
            setupCollapsibleGroups();
            collapseAllExceptSelected();
            setupFormLoadingIndicator();
            initMenu();
            scrollToSelectedEndpoint();
        });
    </script>
</body>
</html>