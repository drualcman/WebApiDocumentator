@page
@using WebApiDocumentator.Areas.Docs.Pages
@model WebApiDocumentator.Areas.Docs.Pages.IndexModel
@{
    var selected = Model.SelectedEndpoint;
    var method = selected?.HttpMethod ?? "GET";
    var route = selected?.Route ?? "/default/route";
    var version = Model.GetApiVersion();
    var descriptionParts = selected?.Description?.Split("\nParámetros:\n") ?? [];
    var summary = descriptionParts.Length > 1 ? descriptionParts[0] : "";
    var parameters = descriptionParts.Length > 1 ? descriptionParts[1].Split("\n").Where(p => !string.IsNullOrWhiteSpace(p)).ToList() : new List<string>();
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@Model.Name (@Model.Version) | Documentation</title>
    <style>
        body {
            display: flex;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            margin: 0;
            height: 100vh;
            overflow-x: hidden;
            background: #f8f9fa;
        }

        #sidebar {
            width: 300px;
            background: #ffffff;
            padding: 20px;
            border-right: 1px solid #dee2e6;
            overflow-y: auto;
            height: 100vh;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }

        #content {
            flex: 2;
            padding: 30px;
            overflow-y: auto;
            min-height: 100%;
        }

        #examples {
            flex: 1;
            padding: 30px;
            background: #f1f3f5;
            border-left: 1px solid #dee2e6;
            overflow-y: auto;
            min-height: 100%;
        }

        .http-method {
            font-weight: 600;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.85em;
            color: white;
            display: inline-block;
        }

        .GET {
            background: #28a745;
        }

        .POST {
            background: #ff9800;
        }

        .DELETE {
            background: #dc3545;
        }

        .PUT {
            background: #007bff;
        }

        .PATCH {
            background: #17a2b8;
        }

        a.endpoint-link {
            text-decoration: none;
            font-size: 0.95em;
            color: #495057;
            display: block;
            margin: 5px 0;
            transition: color 0.2s;
        }

            a.endpoint-link:hover {
                color: #007bff;
            }

        .selected {
            font-weight: 600;
            color: #007bff;
        }

        .schema-table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
            background: #ffffff;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            overflow: hidden;
        }

            .schema-table th, .schema-table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #dee2e6;
            }

            .schema-table th {
                background: #e9ecef;
                font-weight: 600;
                color: #343a40;
            }

            .schema-table tr:last-child td {
                border-bottom: none;
            }

        .json-viewer {
            background: #1e1e1e;
            color: #d4d4d4;
            padding: 15px;
            border-radius: 4px;
            font-family: "Consolas", "Courier New", monospace;
            font-size: 0.9em;
            white-space: pre-wrap;
            word-wrap: break-word;
            overflow-y: auto;
            max-height: 300px;
            margin: 10px 0;
        }

        .endpoint-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }

            .endpoint-header h2 {
                margin: 0;
                font-size: 1.5em;
                color: #343a40;
            }

        h3, h4 {
            color: #343a40;
        }

        pre {
            background: #1e1e1e;
            color: #d4d4d4;
            padding: 15px;
            border-radius: 4px;
            font-family: "Consolas", "Courier New", monospace;
            font-size: 0.9em;
            overflow-x: auto;
        }

        button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
        }

            button:hover {
                background: #0056b3;
            }

        input[type="text"], textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            margin-bottom: 10px;
            font-family: "Consolas", "Courier New", monospace;
        }

        textarea {
            height: 150px;
            resize: vertical;
        }

        .error-message {
            color: #dc3545;
            background: #f8d7da;
            padding: 10px;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
            margin-bottom: 15px;
            font-size: 0.9em;
        }

        .field-error {
            color: #dc3545;
            font-size: 0.8em;
            margin-top: -8px;
            margin-bottom: 10px;
        }

        .general-error {
            color: #dc3545;
            font-size: 0.9em;
            margin-bottom: 5px;
        }
        .schema-table td.source-path {
    color: #007bff;
    font-weight: 600;
}
    </style>
</head>
<body>
    <div id="sidebar">
        <a class="endpoint-link" href="/docs">
            <h3>@Model.Name</h3>
        </a>
        <h4>Endpoints</h4>
        <ul>
            @foreach(var group in Model.Groups)
            {
                    <li>
                        <strong>@group.PathPrefix</strong>
                        <ul>
                        @foreach(var endpoint in group.Endpoints)
                        {
                            var isSelected = endpoint.Route == selected?.Route && endpoint.HttpMethod == selected?.HttpMethod;
                                    <li>
                                        <a class="endpoint-link @(isSelected ? "selected" : "")"
                                           href="?method=@endpoint.HttpMethod&route=@Uri.EscapeDataString(endpoint.Route)">
                                            <span class="http-method @endpoint.HttpMethod">@endpoint.HttpMethod</span>
                                    @endpoint.Route
                                        </a>
                                    </li>
                        }
                        </ul>
                    </li>
            }
        </ul>
    </div>

    <div id="content">
        @if(selected == null)
        {
                <h1>@Model.Name</h1>
                <h2>@Model.Version</h2>
            @if(!string.IsNullOrWhiteSpace(version))
            {
                        <a class="endpoint-link" href="/openapi/@(version).json" target="_blank">
                            OpenAPI @version
                        </a>
            }
                <p>@Model.Description</p>
        }
        else
        {
                <div class="endpoint-header">
                <span class="http-method @selected.HttpMethod">@selected.HttpMethod</span>
                <h2>@selected.Route</h2>
            </div>
            <p>@summary</p>
            @if(parameters.Any())
            {
                    <h4>Parámetros adicionales</h4>
                    <ul>
                    @foreach(var param in parameters)
                    {
                                <li>@param</li>
                    }
                    </ul>
            }

            <h3>Parámetros</h3>
              <h3>Parámetros</h3>
            @if(selected.Parameters.Any())
            {
                    <table class="schema-table">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Tipo</th>
                                <th>Requerido</th>
                                <th>Fuente</th>
                                <th>Descripción</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach(var param in selected.Parameters)
                        {
                                        <tr>
                                            <td>@param.Name</td>
                                            <td>@param.Type</td>
                                            <td>@(param.IsRequired ? "Sí" : "No")</td>
                                            <td class="source-@param.Source.ToLower()">@param.Source</td>
                                            <td>@param.Description</td>
                                        </tr>
                        }
                        </tbody>
                    </table>
            }
            else
            {
                    <p>No hay parámetros.</p>
            }

                <h3>Respuesta</h3>
                <p><strong>Tipo:</strong> @selected.ReturnType</p>
            @if(selected.ReturnSchema != null)
            {
                        <pre class="json-viewer">@System.Text.Json.JsonSerializer.Serialize(selected.ReturnSchema, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre>
            }
            else
            {
                        <p>No hay esquema de retorno disponible.</p>
            }

                <hr />
                <h3>Probar este endpoint</h3>
                <form method="post" action="/Docs?method=@selected.HttpMethod&route=@Uri.EscapeDataString(selected.Route)">
                    <input type="hidden" name="TestInput.Method" value="@method" />
                    <input type="hidden" name="TestInput.Route" value="@route" />
                @Html.AntiForgeryToken()

                @foreach(var param in selected.Parameters)
                {
                    string value = Model.GenerateFlatSchema(param.Schema) ?? "";
                            <div>
                                <label>@param.Name (@param.Type): @(param.IsRequired ? "Requerido" : "Opcional")</label><br />
                        @if(param.IsFromBody)
                        {
                                        <textarea name="TestInput.Parameters[@param.Name]"
                                                  placeholder="@(Model.GenerateFlatSchema(param.Schema) ?? "Enter JSON here")">@value</textarea>
                        }
                        else
                        {
                                        <input type="text"
                                               name="TestInput.Parameters[@param.Name]"
                                               value="@value"
                                               placeholder="@(param.IsRequired ? "Requerido" : "Opcional")" />
                        }
                        @if(ModelState.ContainsKey($"TestInput.Parameters[{param.Name}]"))
                        {
                                        <div class="field-error">
                                @ModelState[$"TestInput.Parameters[{param.Name}]"].Errors.FirstOrDefault()?.ErrorMessage
                                        </div>
                        }
                            </div>
                }
                @if(!ModelState.IsValid && ModelState.Any(e => e.Value?.Errors?.Any(e => !string.IsNullOrWhiteSpace(e.ErrorMessage)) ?? false))
                {
                            <ul>
                        @foreach(var error in ModelState.Where(kvp => !kvp.Key.StartsWith("TestInput.Parameters[")))
                        {
                            foreach(var err in error.Value.Errors)
                            {
                                if(!string.IsNullOrWhiteSpace(err.ErrorMessage))
                                {
                                                        <li class="general-error">
                                        @err.ErrorMessage
                                                        </li>
                                }
                            }
                        }
                            </ul>
                }

                    <button type="submit">Probar</button>
                </form>

            @if(Model.TestResponse != null)
            {
                        <h4>Respuesta de prueba</h4>
                        <pre class="json-viewer">@Model.TestResponse</pre>
            }
        }

    </div>

    @if(selected != null)
    {
            <div id="examples">
                <h3>Ejemplos</h3>

                <h4>cURL</h4>
                <pre>
            curl -X @selected.HttpMethod https://api.tuweb.com@selected.Route@if (Model.ExampleBodyJson != null)
            {
                <text> \
              -H "Content-Type: application/json" \
              -d '@Html.Raw(Model.ExampleBodyJson)'</text>
            }
                        </pre>

                <h4>C# (HttpClient)</h4>
                <pre>
            using var client = new HttpClient();
            client.BaseAddress = new Uri("https://api.tuweb.com");
                @if(Model.ExampleBodyJson != null)
                {
                    <text>var content = new StringContent(@Html.Raw(Model.ExampleBodyJson), System.Text.Encoding.UTF8, "application/json");
                        var response = await client.@(selected.HttpMethod)Async("@selected.Route", content);</text>
                }
                else
                {
                    <text>var response = await client.@(selected.HttpMethod)Async("@selected.Route");</text>
                }
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadAsStringAsync();
                        </pre>

                <h4>fetch (JavaScript)</h4>
                <pre>
            fetch("https://api.tuweb.com@selected.Route", {
                method: "@selected.HttpMethod"@if(Model.ExampleBodyJson != null)
                {
                    <text>,
                            headers: { "Content-Type": "application/json" },
                            body: @Html.Raw(Model.ExampleBodyJson)</text>
                }
            })
            .then(res => res.json())
            .then(data => console.log(data));
                        </pre>
            </div>
    }
</body>
</html>